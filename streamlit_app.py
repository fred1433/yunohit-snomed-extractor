import streamlit as st
import time
import re
from typing import Dict, List, Any

# Configuration de la page
st.set_page_config(
    page_title="üè• Extracteur SNOMED CT - Yunohit",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

def test_imports():
    """Teste les imports pour diagnostic"""
    try:
        import google.generativeai as genai
        st.success("‚úÖ google-generativeai import√© avec succ√®s")
        return True
    except ImportError as e:
        st.error(f"‚ùå Erreur import google-generativeai: {e}")
        return False

def main():
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 15px; color: white; text-align: center; margin-bottom: 2rem;">
        <h1>üè• Extracteur SNOMED CT</h1>
        <h3>Plateforme d'extraction automatis√©e - Yunohit</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Test des imports
    st.markdown("## üîç Diagnostic des d√©pendances")
    
    if test_imports():
        st.success("‚úÖ Toutes les d√©pendances sont disponibles")
        
        # Test API Key
        try:
            api_key = st.secrets.get("GEMINI_API_KEY")
            if api_key:
                st.success(f"‚úÖ API Key configur√©e : {api_key[:20]}...")
                
                # Interface principale
                st.markdown("## üìù Extraction SNOMED CT")
                
                # Interface √† onglets
                tab1, tab2, tab3 = st.tabs(["üìÑ Extraction Simple", "üìä Analyse Batch", "‚öôÔ∏è Configuration"])
                
                with tab1:
                    note_content = st.text_area(
                        "Note m√©dicale:",
                        value="""Enfant L√©o Martin, 8 ans. Consulte pour une √©ruption cutan√©e prurigineuse √©voluant depuis 48h sur les membres et le tronc.
Pas d'ant√©c√©dents notables. Vaccins √† jour. Notion de cas similaire √† l'√©cole.
Examen : L√©sions v√©siculeuses typiques.
Diagnostic : Varicelle.
Traitement : Antihistaminique oral et soins locaux. √âviction scolaire recommand√©e.""",
                        height=150
                    )
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        if st.button("üöÄ Extraire les Entit√©s SNOMED", type="primary"):
                            try:
                                # Import direct ici pour √©viter les probl√®mes de subprocess
                                from snomed_extractor import SNOMEDExtractor
                                from snomed_validator import SNOMEDValidator
                                
                                with st.spinner("üîÑ Extraction en cours..."):
                                    start_time = time.time()
                                    
                                    # Extraction
                                    extractor = SNOMEDExtractor(api_key)
                                    result = extractor.extract_medical_entities(note_content)
                                    extraction_time = time.time() - start_time
                                    
                                    if result and 'entites' in result:
                                        st.success(f"‚úÖ Extraction r√©ussie en {extraction_time:.1f}s")
                                        
                                        # Validation
                                        validator = SNOMEDValidator()
                                        validation_results = []
                                        
                                        for entite in result['entites']:
                                            val_result = validator.validate_code(entite.get('code_snomed', ''))
                                            validation_results.append({
                                                **entite,
                                                'valide': val_result['is_valid'],
                                                'raison': val_result.get('reason', '')
                                            })
                                        
                                        # Affichage des r√©sultats
                                        st.markdown("### üìä R√©sultats de l'extraction")
                                        
                                        # M√©triques
                                        valid_count = sum(1 for r in validation_results if r['valide'])
                                        total_count = len(validation_results)
                                        success_rate = (valid_count / total_count * 100) if total_count > 0 else 0
                                        
                                        col1, col2, col3, col4 = st.columns(4)
                                        with col1:
                                            st.metric("Entit√©s extraites", total_count)
                                        with col2:
                                            st.metric("Codes valides", valid_count)
                                        with col3:
                                            st.metric("Taux de r√©ussite", f"{success_rate:.1f}%")
                                        with col4:
                                            st.metric("Temps d'extraction", f"{extraction_time:.1f}s")
                                        
                                        # Table des r√©sultats
                                        for i, res in enumerate(validation_results, 1):
                                            status = "‚úÖ" if res['valide'] else "‚ùå"
                                            with st.expander(f"{status} {res.get('terme', 'N/A')} - {res.get('code_snomed', 'N/A')}"):
                                                col1, col2 = st.columns(2)
                                                with col1:
                                                    st.write("**Terme:**", res.get('terme', 'N/A'))
                                                    st.write("**Code SNOMED:**", res.get('code_snomed', 'N/A'))
                                                    st.write("**Cat√©gorie:**", res.get('categorie', 'N/A'))
                                                with col2:
                                                    st.write("**Statut:**", "‚úÖ Valide" if res['valide'] else "‚ùå Invalide")
                                                    if not res['valide'] and res.get('raison'):
                                                        st.write("**Raison:**", res['raison'])
                                        
                                        # JSON brut optionnel
                                        with st.expander("üìÑ Voir les donn√©es JSON brutes"):
                                            st.json(result)
                                    
                                    else:
                                        st.warning("‚ö†Ô∏è Aucune entit√© extraite")
                            
                            except Exception as e:
                                st.error(f"‚ùå Erreur lors de l'extraction : {str(e)}")
                                import traceback
                                with st.expander("üîß D√©tails de l'erreur"):
                                    st.code(traceback.format_exc())
                    
                    with col2:
                        st.info("üí° **Conseils:**\n\n- Utilisez des notes structur√©es\n- Incluez diagnostics et traitements\n- Plus de d√©tails = meilleure extraction")
                
                with tab2:
                    st.markdown("### üìä Analyse par lots")
                    st.info("üöß Fonctionnalit√© en d√©veloppement - Prochainement disponible")
                
                with tab3:
                    st.markdown("### ‚öôÔ∏è Configuration")
                    st.write("**API Key:** ‚úÖ Configur√©e")
                    st.write("**Version:** Streamlit Cloud Production")
                    
                    if st.button("üß™ Test de connectivit√© API"):
                        try:
                            import google.generativeai as genai
                            genai.configure(api_key=api_key)
                            
                            # Test simple
                            model = genai.GenerativeModel('gemini-pro')
                            response = model.generate_content("Test de connectivit√© : dites 'OK'")
                            
                            if response.text:
                                st.success("‚úÖ API connect√©e et fonctionnelle")
                                st.write("R√©ponse de test:", response.text)
                            else:
                                st.error("‚ùå Pas de r√©ponse de l'API")
                        except Exception as e:
                            st.error(f"‚ùå Erreur de connectivit√© : {e}")
            
            else:
                st.warning("‚ö†Ô∏è API Key non configur√©e dans les secrets")
                st.markdown("""
                **Pour configurer l'API Key :**
                1. Allez dans les **Settings** de l'app Streamlit
                2. Section **Secrets**
                3. Ajoutez : `GEMINI_API_KEY = "votre_cl√©_ici"`
                4. Sauvegardez - l'app red√©marre automatiquement
                """)
                
        except Exception as e:
            st.error(f"‚ùå Erreur acc√®s secrets : {e}")
    
    else:
        st.error("‚ùå D√©pendances manquantes - Red√©ploiement n√©cessaire")
        st.markdown("""
        **Probl√®me d√©tect√© :** Module google-generativeai non install√©
        
        **Solution :** Le requirements.txt sera mis √† jour automatiquement
        """)

# Sidebar avec informations
with st.sidebar:
    st.markdown("### üè• Yunohit - SNOMED CT")
    st.markdown("**Extracteur automatis√©**")
    st.markdown("---")
    st.markdown("**Fonctionnalit√©s :**")
    st.markdown("‚úÖ Extraction temps r√©el")
    st.markdown("‚úÖ Validation automatique")
    st.markdown("‚úÖ Interface moderne")
    st.markdown("‚úÖ Monitoring int√©gr√©")
    st.markdown("---")
    st.markdown("**Support :** Version Cloud")

if __name__ == "__main__":
    main() 