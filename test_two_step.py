#!/usr/bin/env python3
"""
Script de test comparatif : M√©thode classique vs M√©thode 2-√©tapes
Test de l'hypoth√®se : Gemini trouve-t-il de meilleurs codes SNOMED quand il se concentre exclusivement sur cette t√¢che ?
"""

import time
import concurrent.futures
from datetime import datetime
from dataclasses import dataclass
from typing import List
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text

from models import MedicalNote
from snomed_extractor import SNOMEDExtractor
from snomed_validator import SNOMEDValidator

@dataclass
class ComparisonResult:
    """R√©sultat de comparaison entre les deux m√©thodes"""
    test_id: int
    method: str  # "classique" ou "two_step"
    extraction_time: float
    validation_time: float
    total_time: float
    total_codes: int
    valid_codes: int
    success_rate: float
    terms_found: int

def run_test_classique(test_id: int, note: MedicalNote) -> ComparisonResult:
    """Test avec la m√©thode classique (1 √©tape)"""
    start_time = time.time()
    
    start_extraction = time.time()
    extractor = SNOMEDExtractor()
    extraction = extractor.extract_snomed_info(note)
    end_extraction = time.time()
    
    start_validation = time.time()
    validator = SNOMEDValidator()
    validation_stats = validator.validate_extraction_result(extraction)
    end_validation = time.time()
    
    total_time = time.time() - start_time
    
    # Compter le nombre total de termes trouv√©s
    terms_found = len(extraction.clinical_findings) + len(extraction.procedures) + len(extraction.body_structures)
    
    return ComparisonResult(
        test_id=test_id,
        method="classique",
        extraction_time=end_extraction - start_extraction,
        validation_time=end_validation - start_validation,
        total_time=total_time,
        total_codes=validation_stats.get("total_codes", 0),
        valid_codes=validation_stats.get("valid_codes", 0),
        success_rate=(validation_stats.get("valid_codes", 0) / validation_stats.get("total_codes", 1) * 100) if validation_stats.get("total_codes", 0) > 0 else 0,
        terms_found=terms_found
    )

def run_test_two_step(test_id: int, note: MedicalNote) -> ComparisonResult:
    """Test avec la m√©thode exp√©rimentale 2-√©tapes"""
    start_time = time.time()
    
    start_extraction = time.time()
    extractor = SNOMEDExtractor()
    extraction = extractor.extract_two_step(note)
    end_extraction = time.time()
    
    start_validation = time.time()
    validator = SNOMEDValidator()
    validation_stats = validator.validate_extraction_result(extraction)
    end_validation = time.time()
    
    total_time = time.time() - start_time
    
    # Compter le nombre total de termes trouv√©s
    terms_found = len(extraction.clinical_findings) + len(extraction.procedures) + len(extraction.body_structures)
    
    return ComparisonResult(
        test_id=test_id,
        method="two_step",
        extraction_time=end_extraction - start_extraction,
        validation_time=end_validation - start_validation,
        total_time=total_time,
        total_codes=validation_stats.get("total_codes", 0),
        valid_codes=validation_stats.get("valid_codes", 0),
        success_rate=(validation_stats.get("valid_codes", 0) / validation_stats.get("total_codes", 1) * 100) if validation_stats.get("total_codes", 0) > 0 else 0,
        terms_found=terms_found
    )

def run_parallel_comparison(num_tests: int, note: MedicalNote) -> tuple[List[ComparisonResult], List[ComparisonResult]]:
    """Lancer les tests en parall√®le pour les deux m√©thodes"""
    console = Console()
    console.print(f"üöÄ Lancement de {num_tests} tests en parall√®le pour chaque m√©thode...")
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
        # Soumettre tous les tests
        classique_futures = [
            executor.submit(run_test_classique, i+1, note) 
            for i in range(num_tests)
        ]
        two_step_futures = [
            executor.submit(run_test_two_step, i+1, note) 
            for i in range(num_tests)
        ]
        
        # Collecter les r√©sultats
        classique_results = []
        two_step_results = []
        
        for future in concurrent.futures.as_completed(classique_futures + two_step_futures):
            try:
                result = future.result()
                if result.method == "classique":
                    classique_results.append(result)
                else:
                    two_step_results.append(result)
                console.print(f"‚úÖ Test {result.test_id} ({result.method}) termin√©: {result.success_rate:.1f}% en {result.total_time:.1f}s")
            except Exception as e:
                console.print(f"‚ùå Erreur dans un test: {e}")
    
    return sorted(classique_results, key=lambda x: x.test_id), sorted(two_step_results, key=lambda x: x.test_id)

def analyze_comparison(classique_results: List[ComparisonResult], two_step_results: List[ComparisonResult]) -> None:
    """Analyser et afficher la comparaison entre les deux m√©thodes"""
    console = Console()
    
    # Statistiques m√©thode classique
    classique_success = [r.success_rate for r in classique_results]
    classique_times = [r.total_time for r in classique_results]
    classique_terms = [r.terms_found for r in classique_results]
    
    classique_avg_success = sum(classique_success) / len(classique_success)
    classique_avg_time = sum(classique_times) / len(classique_times)
    classique_avg_terms = sum(classique_terms) / len(classique_terms)
    
    # Statistiques m√©thode 2-√©tapes
    two_step_success = [r.success_rate for r in two_step_results]
    two_step_times = [r.total_time for r in two_step_results]
    two_step_terms = [r.terms_found for r in two_step_results]
    
    two_step_avg_success = sum(two_step_success) / len(two_step_success)
    two_step_avg_time = sum(two_step_times) / len(two_step_times)
    two_step_avg_terms = sum(two_step_terms) / len(two_step_terms)
    
    # Affichage des r√©sultats
    console.print("\n" + "="*80)
    console.print("üî¨ COMPARAISON : CLASSIQUE vs 2-√âTAPES")
    console.print("="*80)
    
    # Tableau d√©taill√©
    table = Table(title="R√©sultats d√©taill√©s par test")
    table.add_column("M√©thode", style="cyan")
    table.add_column("Test", style="magenta")
    table.add_column("Termes", style="green")
    table.add_column("Codes valides", style="yellow")
    table.add_column("Total codes", style="blue")
    table.add_column("Taux r√©ussite", style="red")
    table.add_column("Temps", style="white")
    
    for result in classique_results:
        table.add_row(
            "Classique",
            str(result.test_id),
            str(result.terms_found),
            str(result.valid_codes),
            str(result.total_codes),
            f"{result.success_rate:.1f}%",
            f"{result.total_time:.1f}s"
        )
    
    for result in two_step_results:
        table.add_row(
            "2-√âtapes",
            str(result.test_id),
            str(result.terms_found),
            str(result.valid_codes),
            str(result.total_codes),
            f"{result.success_rate:.1f}%",
            f"{result.total_time:.1f}s"
        )
    
    console.print(table)
    
    # Analyse statistique
    success_diff = two_step_avg_success - classique_avg_success
    time_diff = two_step_avg_time - classique_avg_time
    terms_diff = two_step_avg_terms - classique_avg_terms
    
    summary_text = f"""
üìä ANALYSE COMPARATIVE :

üîµ M√âTHODE CLASSIQUE (1 √©tape) :
   ‚Ä¢ Taux de r√©ussite moyen : {classique_avg_success:.1f}%
   ‚Ä¢ Temps moyen : {classique_avg_time:.1f}s
   ‚Ä¢ Termes trouv√©s moyens : {classique_avg_terms:.1f}
   ‚Ä¢ Meilleur r√©sultat : {max(classique_success):.1f}%
   ‚Ä¢ Pire r√©sultat : {min(classique_success):.1f}%

üü° M√âTHODE 2-√âTAPES (exp√©rimentale) :
   ‚Ä¢ Taux de r√©ussite moyen : {two_step_avg_success:.1f}%
   ‚Ä¢ Temps moyen : {two_step_avg_time:.1f}s
   ‚Ä¢ Termes trouv√©s moyens : {two_step_avg_terms:.1f}
   ‚Ä¢ Meilleur r√©sultat : {max(two_step_success):.1f}%
   ‚Ä¢ Pire r√©sultat : {min(two_step_success):.1f}%

üéØ DIFF√âRENCES :
   ‚Ä¢ Pr√©cision des codes : {success_diff:+.1f} points
   ‚Ä¢ Temps d'ex√©cution : {time_diff:+.1f}s
   ‚Ä¢ Nombre de termes : {terms_diff:+.1f}
"""
    
    if success_diff > 2:
        summary_text += "\n   ‚Ä¢ üèÜ GAGNANT : M√©thode 2-√©tapes (codes plus pr√©cis)"
    elif success_diff < -2:
        summary_text += "\n   ‚Ä¢ üèÜ GAGNANT : M√©thode classique (codes plus pr√©cis)"
    else:
        summary_text += "\n   ‚Ä¢ ü§ù √âGALIT√â : Performances similaires"
        
    if abs(time_diff) > 5:
        if time_diff > 0:
            summary_text += f"\n   ‚Ä¢ ‚è±Ô∏è  M√©thode classique {abs(time_diff):.1f}s plus rapide"
        else:
            summary_text += f"\n   ‚Ä¢ ‚è±Ô∏è  M√©thode 2-√©tapes {abs(time_diff):.1f}s plus rapide"
    
    console.print(Panel(summary_text, title="üî¨ Analyse exp√©rimentale", border_style="blue"))

def main():
    """Fonction principale de test comparatif"""
    console = Console()
    
    # Titre
    title = Text("üî¨ TEST EXP√âRIMENTAL : Classique vs 2-√âtapes", style="bold blue")
    console.print(Panel(title, expand=False))
    
    # Note m√©dicale de test
    note_content = """Enfant L√©o Martin, 8 ans. Consulte pour une √©ruption cutan√©e prurigineuse √©voluant depuis 48h sur les membres et le tronc.
Pas d'ant√©c√©dents notables. Vaccins √† jour. Notion de cas similaire √† l'√©cole.
Examen : L√©sions v√©siculeuses typiques.
Diagnostic : Varicelle.
Traitement : Antihistaminique oral et soins locaux. √âviction scolaire recommand√©e."""
    
    medical_note = MedicalNote(
        patient_id="PAT-001",
        patient_name="L√©o Martin",
        date=datetime.now().strftime("%Y-%m-%d"),
        doctor="Dr. Exemple",
        content=note_content,
        specialty="P√©diatrie"
    )
    
    num_tests = 5
    console.print(f"\nüìã Configuration : {num_tests} tests par m√©thode")
    console.print(f"üéØ Hypoth√®se : La sp√©cialisation des prompts am√©liore-t-elle la pr√©cision des codes SNOMED ?")
    
    start_global = time.time()
    
    try:
        # Tests comparatifs
        classique_results, two_step_results = run_parallel_comparison(num_tests, medical_note)
        
        end_global = time.time()
        console.print(f"\n‚è±Ô∏è  Temps total des tests : {end_global - start_global:.1f}s")
        
        # Analyse comparative
        analyze_comparison(classique_results, two_step_results)
        
    except Exception as e:
        console.print(f"\n‚ùå [red]Erreur : {e}[/red]")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 